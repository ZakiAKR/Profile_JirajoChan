//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Main.Assets/Actions/A_JoyCon.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @A_JoyCon : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @A_JoyCon()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""A_JoyCon"",
    ""maps"": [
        {
            ""name"": ""JoyCon"",
            ""id"": ""f794fa6b-7c30-4cae-bec8-c32264d4bc5b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e18215e3-97e7-49ff-92fc-3d7c4cfda078"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3731bbbd-8333-4a1d-ad81-d3bc464a57ff"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/hat"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""fd12c1f4-049f-4b37-96bd-7c1b0a3efb14"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""37f69d69-d355-4a21-9950-0eed62c40814"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""06abc274-1e7c-4dc8-92a6-2b3eaaaaa130"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5117b835-8381-4402-af7c-f255640f7dcd"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c0141d27-4b5e-4b3e-9867-67361ba5f2cb"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // JoyCon
        m_JoyCon = asset.FindActionMap("JoyCon", throwIfNotFound: true);
        m_JoyCon_Move = m_JoyCon.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // JoyCon
    private readonly InputActionMap m_JoyCon;
    private IJoyConActions m_JoyConActionsCallbackInterface;
    private readonly InputAction m_JoyCon_Move;
    public struct JoyConActions
    {
        private @A_JoyCon m_Wrapper;
        public JoyConActions(@A_JoyCon wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_JoyCon_Move;
        public InputActionMap Get() { return m_Wrapper.m_JoyCon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoyConActions set) { return set.Get(); }
        public void SetCallbacks(IJoyConActions instance)
        {
            if (m_Wrapper.m_JoyConActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_JoyConActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_JoyConActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_JoyConActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_JoyConActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public JoyConActions @JoyCon => new JoyConActions(this);
    public interface IJoyConActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
